# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://hub.jupyter.org/helm-chart/
#
hub:
  config:
    Authenticator:
      admin_user:
        - sverhoeven
      allowed_users:
        - sverhoeven
    GitHubOAuthenticator:
      client_id: ....
      client_secret: ....
      oauth_callback_url: http://172.31.180.200/hub/oauth_callback
    JupyterHub:
      authenticator_class: github
      allowed_organizations:
        - eWaterCycle
      scope:
        - read:org
    # TODO fix below, as is jupyterhub gives error when starting server
    # do `Rootless Podman with the privileged flag set` chapter at
    # https://www.redhat.com/sysadmin/podman-inside-kubernetes
    KubeSpawner:
      privileged: true
      allow_privilege_escalation: true
      container_security_context:
        privileged: true # TODO less privileged
        runAsUser: 1000

      # Got ERROR  : Failed to set mount propagation: Permission denied with:
      # securityContext:
      #  allowPrivilegeEscalation: true
      #  capabilities:
      #    add:
      #      - "SYS_ADMIN"
      #      - "MKNOD"
      #      - "SYS_CHROOT"
      #      - "SETFCAP"
      # resources:
      #    limits:
      #      github.com/fuse: 1
      
      # extra_resource_limits:
      #   github.com/fuse: 1
  extraConfig:
    ngshare.py: |
      c.JupyterHub.services.append({
        'name': 'ngshare',
        'url': 'http://ngshare.teach.svc.cluster.local:8080',
        'api_token': '3VEgEzkhFkQsdZNI7zhnyMW6U0a2xsZq',
        'oauth_no_confirm': True})
singleuser:
  image:
    # You should replace the "latest" tag with a fixed version from:
    # https://hub.docker.com/r/jupyter/datascience-notebook/tags/
    # Inspect the Dockerfile at:
    # https://github.com/jupyter/docker-stacks/tree/HEAD/datascience-notebook/Dockerfile
    # name: jupyter/datascience-notebook
    name: ghcr.io/ewatercycle/teaching
    tag: latest
  storage:
    extraVolumes:
      - name: jupyterhub-shared
        persistentVolumeClaim:
          claimName: my-pvc
      # - name: dcache-ro
      #   persistentVolumeClaim:
      #     claimName: data-rclone-example
    extraVolumeMounts:
      - name: jupyterhub-shared
        mountPath: /home/shared
      # - name: dcache-ro
      #   mountPath: /home/data
  extraFiles:
    # TODO add /etc/jupyter/nbgrader_config.py here see https://ngshare.readthedocs.io/en/latest/user_guide/install_z2jh.html#installing-ngshare-exchange
    # jupyter_notebook_config reference: https://jupyter-notebook.readthedocs.io/en/stable/config.html
    jupyter_notebook_config.json:
      mountPath: /etc/jupyter/jupyter_notebook_config.json
      # data is a YAML structure here but will be rendered to JSON file as our
      # file extension is ".json".
      data:
        MappingKernelManager:
          # cull_idle_timeout: timeout (in seconds) after which an idle kernel is
          # considered ready to be culled
          cull_idle_timeout: 1200 # default: 0

          # cull_interval: the interval (in seconds) on which to check for idle
          # kernels exceeding the cull timeout value
          cull_interval: 120 # default: 300

          # cull_connected: whether to consider culling kernels which have one
          # or more connections
          cull_connected: true # default: false

          # cull_busy: whether to consider culling kernels which are currently
          # busy running some code
          cull_busy: false # default: false
  networkPolicy:
    egressAllowRules:
      privateIPs: true